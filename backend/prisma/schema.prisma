generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model weightHistory {
  weightId  Int        @id(map: "weightIdPK") @default(autoincrement())
  dayId     Int        @unique
  weight    Float
  day       dayHistory @relation(fields: [dayId], references: [dayId], map: "dayIdFK")
  changedAt DateTime   @default(now()) @updatedAt @db.Timestamp(6)
}

model units {
  unitId       Int      @id(map: "unitIdPK") @default(autoincrement())
  unit         String   @unique(map: "unitUQ") @db.VarChar(30)
  defaultValue Float
  foods        foods[]
  changedAt    DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model foods {
  foodId             Int      @id(map: "foodIdPK") @default(autoincrement())
  name               String   @db.VarChar(200)
  kcal               Float
  unitId             Int
  perUnit            Float
  protein            Float
  fat                Float
  saturatedFat       Float?
  polyunsaturatedFat Float?
  monounsaturatedFat Float?
  carbohydrate       Float
  sugar              Float?
  fiber              Float?
  unit               units    @relation(fields: [unitId], references: [unitId], map: "unitIdFK")
  meals              meals[]
  changedAt          DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model connections {
  connectionId Int         @id(map: "connectionIdPK") @default(autoincrement())
  coachId      Int
  userId       Int
  user         users       @relation("connections_coachIdTousers", fields: [coachId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "coachIdFK")
  coach        users       @relation("connections_userIdTousers", fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "userIdFK")
  changedAt    DateTime    @default(now()) @updatedAt @db.Timestamp(6)
  schedules    schedules[]
}

model connectionRequest {
  connectionRequestId Int      @id() @default(autoincrement())
  userId              Int
  coachId             Int
  user                users    @relation("conn_req_userToUser", fields: [userId], references: [userId])
  coach               users    @relation("conn_req_coachToUser", fields: [coachId], references: [userId])
  requestDate         DateTime @default(now())
  requestBy           Int
  changedAt           DateTime @default(now()) @updatedAt @db.Timestamp(6)

  @@unique([userId, coachId])
}

model users {
  userId                 Int                 @id(map: "userIdPK") @default(autoincrement())
  email                  String              @unique(map: "emailUQ") @db.VarChar(255)
  password               String              @db.VarChar(255)
  roleId                 Int
  refreshTokens          String[]
  coachConnections       connections[]       @relation("connections_coachIdTousers")
  userConnections        connections[]       @relation("connections_userIdTousers")
  profile_data           profileData?
  roles                  roles               @relation(fields: [roleId], references: [roleId], onDelete: NoAction, onUpdate: NoAction, map: "roleIdFK")
  userConnectionRequest  connectionRequest[] @relation("conn_req_userToUser")
  coachConnectionRequest connectionRequest[] @relation("conn_req_coachToUser")
  changedAt              DateTime            @default(now()) @updatedAt @db.Timestamp(6)
}

model schedules {
  scheduleId    Int            @id(map: "scheduleIdPK") @default(autoincrement())
  connectionId  Int
  date          DateTime
  rate          Int?
  reply         String?
  mealSchedules mealSchedule[]
  connection    connections    @relation(fields: [connectionId], references: [connectionId])
  changedAt     DateTime       @default(now()) @updatedAt @db.Timestamp(6)
}

model mealSchedule {
  mealScheduleId Int       @id(map: "mealScheduleIdPK") @default(autoincrement())
  mealId         Int
  scheduleId     Int
  changedAt      DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  meal           meals     @relation(fields: [mealId], references: [mealId])
  schedule       schedules @relation(fields: [scheduleId], references: [scheduleId])
}

model mealHistory {
  mealHistoryId Int         @id(map: "mealHistoryIdPK") @default(autoincrement())
  dayId         Int
  mealId        Int
  periodName    String      @db.VarChar(30)
  changedAt     DateTime    @default(now()) @updatedAt @db.Timestamp(6)
  day           dayHistory  @relation(fields: [dayId], references: [dayId])
  mealPeriod    mealPeriods @relation(fields: [periodName], references: [periodName])
  meals         meals       @relation(fields: [mealId], references: [mealId], map: "mealIdFK")
}

model meals {
  mealId        Int            @id(map: "mealIdPK") @default(autoincrement())
  foodId        Int
  amount        Float
  addedBy       String         @default("user")
  changedAt     DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  completed     Boolean        @default(false)
  mealHistory   mealHistory[]
  mealSchedules mealSchedule[]
  food          foods          @relation(fields: [foodId], references: [foodId])
}

model dayHistory {
  dayId         Int            @id(map: "dayIdPK") @default(autoincrement())
  profileId     Int
  date          DateTime       @db.Date
  changedAt     DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  profileData   profileData    @relation(fields: [profileId], references: [profileId], onDelete: NoAction, onUpdate: NoAction, map: "profileIdFK")
  mealHistory   mealHistory[]
  weightHistory weightHistory?

  @@unique([dayId, profileId], map: "dayIdProfileIdUQ")
}

model mealPeriods {
  periodName  String        @id(map: "periodNameIdPK") @db.VarChar(30)
  mealHistory mealHistory[]
  changedAt   DateTime      @default(now()) @updatedAt @db.Timestamp(6)
}

model profileData {
  profileId        Int          @id(map: "profileIdPK") @default(autoincrement())
  userId           Int          @unique
  registrationDate DateTime     @default(now()) @db.Date
  firstName        String       @db.VarChar(100)
  birthDay         DateTime     @db.Date
  lastName         String?      @db.VarChar(200)
  height           Float?
  dayHistory       dayHistory[]
  user             users        @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "userIdFK")
  goal             goals?
  changedAt        DateTime     @default(now()) @updatedAt @db.Timestamp(6)
}

model goals {
  goalId              Int         @id() @default(autoincrement())
  profileId           Int         @unique
  profile             profileData @relation(fields: [profileId], references: [profileId])
  targetWeight        Float?
  targetCalories      Float?
  carbohydratesPerDay Int         @default(50)
  proteinPerDay       Int         @default(30)
  fatPerDay           Int         @default(20)
  changedAt           DateTime    @default(now()) @updatedAt @db.Timestamp(6)
}

model roles {
  roleId    Int      @id(map: "roleIdPK") @default(autoincrement())
  roleName  String   @db.VarChar(50)
  users     users[]
  changedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}
